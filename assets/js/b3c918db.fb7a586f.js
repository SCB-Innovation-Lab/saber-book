"use strict";(self.webpackChunksaber_book=self.webpackChunksaber_book||[]).push([[971],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||a;return r?o.createElement(d,s(s({ref:t},i),{},{components:r})):o.createElement(d,s({ref:t},i))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<a;p++)s[p]=r[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8068:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const a={},s="Glossary",l={unversionedId:"our-projects/test/glossary",id:"our-projects/test/glossary",title:"Glossary",description:"Core Pool The total token balance of a pool. Does not refer to any user balance.",source:"@site/docs/our-projects/test/glossary.md",sourceDirName:"our-projects/test",slug:"/our-projects/test/glossary",permalink:"/saber-book/docs/our-projects/test/glossary",draft:!1,editUrl:"https://github.com/SCB-Innovation-Lab/saber-book/tree/master/docs/our-projects/test/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Components",permalink:"/saber-book/docs/our-projects/test/components"},next:{title:"Technical Reference",permalink:"/saber-book/docs/our-projects/test/technical-ref"}},c={},p=[],i={toc:p},u="wrapper";function f(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"glossary"},"Glossary"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Core Pool"),": A ",(0,n.kt)("inlineCode",{parentName:"p"},"BPool"),' contract object - this is the "base" pool that actually holds the tokens ',(0,n.kt)("strong",{parentName:"p"},"Balance"),": The total token balance of a pool. Does not refer to any user balance."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Denorm"),": Denormalized weight. Weights on a BPool, though often displayed as percentages, are configured and stored in their ",(0,n.kt)("strong",{parentName:"p"},"denormalized")," form. For instance, in a two-token pool with denormalized weights of A=38 and B=2, token A's percentage weight would be 38/(38+2), or 95%. Conversely, token B's proportion would be 2/(38+2), or 5%."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Controller"),': The pool\'s "owner"; an address that can call ',(0,n.kt)("inlineCode",{parentName:"p"},"CONTROL")," capabilities."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Factory"),": The official BPool factory. Pools deployed from this factory appear on Balancer user interfaces (e.g., the ",(0,n.kt)("a",{parentName:"p",href:"https://balancer.exchange/#/swap"},"Exchange")," and ",(0,n.kt)("a",{parentName:"p",href:"https://pools.balancer.exchange/#/"},"Pool Manager"),")."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Smart Pool"),": A contract that owns (i.e., is the ",(0,n.kt)("strong",{parentName:"p"},"controller)"),", ","*",(0,n.kt)("strong",{parentName:"p"},"*","of a")," Core ","*",(0,n.kt)("strong",{parentName:"p"},"*","Pool"),". Much more in Component section."))}f.isMDXComponent=!0}}]);